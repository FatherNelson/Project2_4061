ssize_t read(int filedes, char* buffer, size_t n)

	Returns number of bytes actually read up to EOF
	Returns 0 if at EOF, -1 error
	buffer must be allocated: output parameter!


Example:

foo.txt:
	Hello John Hello Rich Hello Jay

char buf1[12], buf2[12];
int fd, n1, n2, n3;
fd = open("foo", O_RDONLY);
n1 = read(fd, buf1, 11); //n1 is 11
n2 = read(fd, buf2, 11); //n2 is 11
n3 = read(fd, buf1, 11); //n3 is 9

Key points:
	read does not give you a new buffer; common error

Is buf1 or buf2 a string?
	No, they are not null terminated
What does it need?
	Error check


Read exercise:

#define BUFSIZE 512
void main(){
	int fd;
	int total = 0;
	fd = open("somefile", O_RDONLY);
	printf("Size = %d \n", total);
}

//Writing

ssize_t write(int filedes, const char* buffer, size_t n);
Returns number of bytes written. If this is <n, this is a problem


Re-direction: another key CS concept!
What is the default I/O location?
	The terminal

cat foo.bar > baz = Put the bytes from this file into here

#include <uintstd.h>
int dup2 (int fd1, int fd2);
#fd1 must already be open
This function forces fd2 to point at what fd1 points to.

